{"Filepath":"examples/test-taskbar/testtaskbarwindow.h","Functions":[{"Uniquefunname":" ~TestTaskbarWindow()","Funname":"~TestTaskbarWindow","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dfiledrag.h","Functions":[{"Uniquefunname":"Q_OBJECT public DFileDrag(QObject * source,DFileDragServer * server)","Funname":"DFileDrag","Returntype":"Q_OBJECT public","Args":"QObject * source,DFileDragServer * server"},{"Uniquefunname":"void setMimeData(QMimeData * data)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data"},{"Uniquefunname":"QUrl targetUrl()","Funname":"targetUrl","Returntype":"QUrl","Args":""},{"Uniquefunname":"Q_SIGNALS targetUrlChanged(QUrl url)","Funname":"targetUrlChanged","Returntype":"Q_SIGNALS","Args":"QUrl url"}],"Records":null}
{"Filepath":"src/dfiledragclient.h","Functions":[{"Uniquefunname":"public checkMimeData(const QMimeData * data)","Funname":"checkMimeData","Returntype":"public","Args":"const QMimeData * data"},{"Uniquefunname":"int progress()","Funname":"progress","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS progressChanged(int progress)","Funname":"progressChanged","Returntype":"Q_SIGNALS","Args":"int progress"},{"Uniquefunname":"void serverDestroyed()","Funname":"serverDestroyed","Returntype":"void","Args":""},{"Uniquefunname":"void setTargetData(const QMimeData * data,QString key,QVariant value)","Funname":"setTargetData","Returntype":"void","Args":"const QMimeData * data,QString key,QVariant value"},{"Uniquefunname":"void setTargetUrl(const QMimeData * data,QUrl url)","Funname":"setTargetUrl","Returntype":"void","Args":"const QMimeData * data,QUrl url"},{"Uniquefunname":"DFileDragState state()","Funname":"state","Returntype":"DFileDragState","Args":""},{"Uniquefunname":"void stateChanged(DFileDragState state)","Funname":"stateChanged","Returntype":"void","Args":"DFileDragState state"}],"Records":null}
{"Filepath":"src/dfiledragcommon.h","Functions":null,"Records":[{"Name":"enum:DFileDragState","Fields":["CustomState","Failed","Finished","Paused","Running","Stalled"]}]}
{"Filepath":"src/dfiledragserver.h","Functions":[{"Uniquefunname":"public Q_SLOTS setProgress(int progress)","Funname":"setProgress","Returntype":"public Q_SLOTS","Args":"int progress"},{"Uniquefunname":"void setState(DFileDragState state)","Funname":"setState","Returntype":"void","Args":"DFileDragState state"},{"Uniquefunname":"QVariant targetData(const QString \u0026 key)","Funname":"targetData","Returntype":"QVariant","Args":"const QString \u0026 key"},{"Uniquefunname":"Q_SIGNALS targetDataChanged(const QString \u0026 key)","Funname":"targetDataChanged","Returntype":"Q_SIGNALS","Args":"const QString \u0026 key"},{"Uniquefunname":" ~DFileDragServer()","Funname":"~DFileDragServer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dforeignwindow.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QString wmClass READ wmClass NOTIFY wmClassChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QString wmClass READ wmClass NOTIFY wmClassChanged"},{"Uniquefunname":"protected event(QEvent *)","Funname":"event","Returntype":"protected","Args":"QEvent *"},{"Uniquefunname":"DForeignWindow * fromWinId(WId id)","Funname":"fromWinId","Returntype":"DForeignWindow *","Args":"WId id"},{"Uniquefunname":"quint32 pid()","Funname":"pid","Returntype":"quint32","Args":""},{"Uniquefunname":"void pidChanged()","Funname":"pidChanged","Returntype":"void","Args":""},{"Uniquefunname":"QString wmClass()","Funname":"wmClass","Returntype":"QString","Args":""},{"Uniquefunname":"Q_SIGNALS wmClassChanged()","Funname":"wmClassChanged","Returntype":"Q_SIGNALS","Args":""}],"Records":null}
{"Filepath":"src/dguiapplicationhelper.h","Functions":[{"Uniquefunname":"protected DGuiApplicationHelper()","Funname":"DGuiApplicationHelper","Returntype":"protected","Args":""},{"Uniquefunname":"    D_PRIVATE_SLOT(void _q_initApplicationTheme(bool))","Funname":"D_PRIVATE_SLOT","Returntype":"private","Args":"void _q_initApplicationTheme (bool)"},{"Uniquefunname":"QColor adjustColor(const QColor \u0026 base,qint8 hueFloat,qint8 saturationFloat,qint8 lightnessFloat,qint8 redFloat,qint8 greenFloat,qint8 blueFloat,qint8 alphaFloat)","Funname":"adjustColor","Returntype":"QColor","Args":"const QColor \u0026 base,qint8 hueFloat,qint8 saturationFloat,qint8 lightnessFloat,qint8 redFloat,qint8 greenFloat,qint8 blueFloat,qint8 alphaFloat"},{"Uniquefunname":"DPalette applicationPalette()","Funname":"applicationPalette","Returntype":"DPalette","Args":""},{"Uniquefunname":"DPlatformTheme * applicationTheme()","Funname":"applicationTheme","Returntype":"DPlatformTheme *","Args":""},{"Uniquefunname":"QColor blendColor(const QColor \u0026 substrate,const QColor \u0026 superstratum)","Funname":"blendColor","Returntype":"QColor","Args":"const QColor \u0026 substrate,const QColor \u0026 superstratum"},{"Uniquefunname":"DPalette fetchPalette(const DPlatformTheme * theme)","Funname":"fetchPalette","Returntype":"DPalette","Args":"const DPlatformTheme * theme"},{"Uniquefunname":"void generatePaletteColor(DPalette \u0026 base,DPalette::ColorType role,ColorType type)","Funname":"generatePaletteColor","Returntype":"void","Args":"DPalette \u0026 base,DPalette::ColorType role,ColorType type"},{"Uniquefunname":"void generatePaletteColor(DPalette \u0026 base,QPalette::ColorRole role,ColorType type)","Funname":"generatePaletteColor","Returntype":"void","Args":"DPalette \u0026 base,QPalette::ColorRole role,ColorType type"},{"Uniquefunname":"virtual void initialize()","Funname":"initialize","Returntype":"virtual void","Args":""},{"Uniquefunname":"DGuiApplicationHelper * instance()","Funname":"instance","Returntype":"DGuiApplicationHelper *","Args":""},{"Uniquefunname":"bool isXWindowPlatform()","Funname":"isXWindowPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"void newProcessInstance(qint64 pid,const QStringList \u0026 arguments)","Funname":"newProcessInstance","Returntype":"void","Args":"qint64 pid,const QStringList \u0026 arguments"},{"Uniquefunname":"ColorType paletteType()","Funname":"paletteType","Returntype":"ColorType","Args":""},{"Uniquefunname":"void paletteTypeChanged(ColorType paletteType)","Funname":"paletteTypeChanged","Returntype":"void","Args":"ColorType paletteType"},{"Uniquefunname":"void registerInstanceCreator(HelperCreator creator)","Funname":"registerInstanceCreator","Returntype":"void","Args":"HelperCreator creator"},{"Uniquefunname":"void setApplicationPalette(const DPalette \u0026 palette)","Funname":"setApplicationPalette","Returntype":"void","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"void setColorCompositingEnabled(bool on)","Funname":"setColorCompositingEnabled","Returntype":"void","Args":"bool on"},{"Uniquefunname":"void setPaletteType(ColorType paletteType)","Funname":"setPaletteType","Returntype":"void","Args":"ColorType paletteType"},{"Uniquefunname":"public Q_SLOTS setThemeType(ColorType themeType)","Funname":"setThemeType","Returntype":"public Q_SLOTS","Args":"ColorType themeType"},{"Uniquefunname":"void setUseInactiveColorGroup(bool on)","Funname":"setUseInactiveColorGroup","Returntype":"void","Args":"bool on"},{"Uniquefunname":"DPalette standardPalette(ColorType type)","Funname":"standardPalette","Returntype":"DPalette","Args":"ColorType type"},{"Uniquefunname":"DPlatformTheme * systemTheme()","Funname":"systemTheme","Returntype":"DPlatformTheme *","Args":""},{"Uniquefunname":"ColorType themeType()","Funname":"themeType","Returntype":"ColorType","Args":""},{"Uniquefunname":"Q_SIGNALS themeTypeChanged(ColorType themeType)","Funname":"themeTypeChanged","Returntype":"Q_SIGNALS","Args":"ColorType themeType"},{"Uniquefunname":"ColorType toColorType(const QColor \u0026 color)","Funname":"toColorType","Returntype":"ColorType","Args":"const QColor \u0026 color"},{"Uniquefunname":"ColorType toColorType(const QPalette \u0026 palette)","Funname":"toColorType","Returntype":"ColorType","Args":"const QPalette \u0026 palette"},{"Uniquefunname":"DPalette windowPalette(QWindow * window)","Funname":"windowPalette","Returntype":"DPalette","Args":"QWindow * window"},{"Uniquefunname":"DPlatformTheme * windowTheme(QWindow * window)","Funname":"windowTheme","Returntype":"DPlatformTheme *","Args":"QWindow * window"},{"Uniquefunname":" ~DGuiApplicationHelper()","Funname":"~DGuiApplicationHelper","Returntype":"","Args":""}],"Records":[{"Name":"enum:ColorType","Fields":["DarkType","LightType","UnknownType"]},{"Name":"enum:SingleScope","Fields":["GroupScope","UserScope","WorldScope"]}]}
{"Filepath":"src/dnativesettings.h","Functions":[{"Uniquefunname":"protected DNativeSettings(DNativeSettingsPrivate \u0026 dd,const QMetaObject * metaObject,quint32 window,QObject * parent)","Funname":"DNativeSettings","Returntype":"protected","Args":"DNativeSettingsPrivate \u0026 dd,const QMetaObject * metaObject,quint32 window,QObject * parent"},{"Uniquefunname":" DNativeSettings(const QMetaObject * metaObject,quint32 window,const QByteArray \u0026 domain,QObject * parent)","Funname":"DNativeSettings","Returntype":"","Args":"const QMetaObject * metaObject,quint32 window,const QByteArray \u0026 domain,QObject * parent"},{"Uniquefunname":"    D_DECLARE_PRIVATE(DNativeSettings)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DNativeSettings"},{"Uniquefunname":"private __setAllKeys(const QByteArrayList \u0026 keys)","Funname":"__setAllKeys","Returntype":"private","Args":"const QByteArrayList \u0026 keys"},{"Uniquefunname":"QByteArrayList allKeys()","Funname":"allKeys","Returntype":"QByteArrayList","Args":""},{"Uniquefunname":"Q_SIGNALS allKeysChanged()","Funname":"allKeysChanged","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"QVariant getSetting(const QByteArray \u0026 name)","Funname":"getSetting","Returntype":"QVariant","Args":"const QByteArray \u0026 name"},{"Uniquefunname":"bool init(const QMetaObject * metaObject,quint32 window)","Funname":"init","Returntype":"bool","Args":"const QMetaObject * metaObject,quint32 window"},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"void propertyChanged(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"propertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void setSetting(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"setSetting","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"}],"Records":null}
{"Filepath":"src/dpalette.h","Functions":[{"Uniquefunname":" DPalette()","Funname":"DPalette","Returntype":"","Args":""},{"Uniquefunname":" DPalette(const DPalette \u0026 palette)","Funname":"DPalette","Returntype":"","Args":"const DPalette \u0026 palette"},{"Uniquefunname":" DPalette(const QPalette \u0026 palette)","Funname":"DPalette","Returntype":"","Args":"const QPalette \u0026 palette"},{"Uniquefunname":"const QBrush \u0026 brush(ColorGroup cg,ColorType ct)","Funname":"brush","Returntype":"const QBrush \u0026","Args":"ColorGroup cg,ColorType ct"},{"Uniquefunname":"const QBrush \u0026 brush(ColorType ct)","Funname":"brush","Returntype":"const QBrush \u0026","Args":"ColorType ct"},{"Uniquefunname":"const QColor \u0026 color(ColorGroup cg,ColorType ct)","Funname":"color","Returntype":"const QColor \u0026","Args":"ColorGroup cg,ColorType ct"},{"Uniquefunname":"const QColor \u0026 color(ColorType ct)","Funname":"color","Returntype":"const QColor \u0026","Args":"ColorType ct"},{"Uniquefunname":"const QBrush \u0026 darkLively()","Funname":"darkLively","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 frameBorder()","Funname":"frameBorder","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 frameShadowBorder()","Funname":"frameShadowBorder","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 itemBackground()","Funname":"itemBackground","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 lightLively()","Funname":"lightLively","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 placeholderText()","Funname":"placeholderText","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"    inline void setBrush(ColorType ct, const QBrush \u0026brush)","Funname":"setBrush","Returntype":"void","Args":"ColorType ct,const QBrush \u0026 brush"},{"Uniquefunname":"void setBrush(ColorGroup cg,ColorType ct,const QBrush \u0026 brush)","Funname":"setBrush","Returntype":"void","Args":"ColorGroup cg,ColorType ct,const QBrush \u0026 brush"},{"Uniquefunname":"    inline void setColor(ColorGroup cg, ColorType ct, const QColor \u0026color)","Funname":"setColor","Returntype":"void","Args":"ColorGroup cg,ColorType ct,const QColor \u0026 color"},{"Uniquefunname":"    inline void setColor(ColorType ct, const QColor \u0026color)","Funname":"setColor","Returntype":"void","Args":"ColorType ct,const QColor \u0026 color"},{"Uniquefunname":"const QBrush \u0026 textLively()","Funname":"textLively","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 textTiele()","Funname":"textTiele","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 textTips()","Funname":"textTips","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":"const QBrush \u0026 textWarning()","Funname":"textWarning","Returntype":"const QBrush \u0026","Args":""},{"Uniquefunname":" ~DPalette()","Funname":"~DPalette","Returntype":"","Args":""}],"Records":[{"Name":"enum:ColorType","Fields":["DarkLively","FrameBorder","FrameShadowBorder","ItemBackground","LightLively","NColorTypes","NoType","ObviousBackground","PlaceholderText","TextLively","TextTips","TextTitle","TextWarning"]}]}
{"Filepath":"src/dplatformhandle.h","Functions":[{"Uniquefunname":"Q_OBJECT Q_PROPERTY(int windowRadius READ windowRadius WRITE setWindowRadius NOTIFY windowRadiusChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int windowRadius READ windowRadius WRITE setWindowRadius NOTIFY windowRadiusChanged"},{"Uniquefunname":"bool autoInputMaskByClipPath()","Funname":"autoInputMaskByClipPath","Returntype":"bool","Args":""},{"Uniquefunname":"void autoInputMaskByClipPathChanged()","Funname":"autoInputMaskByClipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"QColor borderColor()","Funname":"borderColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void borderColorChanged()","Funname":"borderColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"int borderWidth()","Funname":"borderWidth","Returntype":"int","Args":""},{"Uniquefunname":"void borderWidthChanged()","Funname":"borderWidthChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPainterPath clipPath()","Funname":"clipPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"void clipPathChanged()","Funname":"clipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool connectHasBlurWindowChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectHasBlurWindowChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectWindowManagerChangedSignal(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectWindowManagerChangedSignal","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool enableBlurWindow()","Funname":"enableBlurWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void enableBlurWindowChanged()","Funname":"enableBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void enableDXcbForWindow(QWindow * window)","Funname":"enableDXcbForWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void enableDXcbForWindow(QWindow * window,bool redirectContent)","Funname":"enableDXcbForWindow","Returntype":"void","Args":"QWindow * window,bool redirectContent"},{"Uniquefunname":"bool enableSystemMove()","Funname":"enableSystemMove","Returntype":"bool","Args":""},{"Uniquefunname":"void enableSystemMoveChanged()","Funname":"enableSystemMoveChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool enableSystemResize()","Funname":"enableSystemResize","Returntype":"bool","Args":""},{"Uniquefunname":"void enableSystemResizeChanged()","Funname":"enableSystemResizeChanged","Returntype":"void","Args":""},{"Uniquefunname":"protected eventFilter(QObject * obj,QEvent * event)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * obj,QEvent * event"},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"Q_SIGNALS frameMarginsChanged()","Funname":"frameMarginsChanged","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"QRegion frameMask()","Funname":"frameMask","Returntype":"QRegion","Args":""},{"Uniquefunname":"void frameMaskChanged()","Funname":"frameMaskChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool isDXcbPlatform()","Funname":"isDXcbPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEnabledDXcb(const QWindow * window)","Funname":"isEnabledDXcb","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"bool isEnabledNoTitlebar(const QWindow * window)","Funname":"isEnabledNoTitlebar","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"QString pluginVersion()","Funname":"pluginVersion","Returntype":"QString","Args":""},{"Uniquefunname":"WId realWindowId()","Funname":"realWindowId","Returntype":"WId","Args":""},{"Uniquefunname":"void setAutoInputMaskByClipPath(bool autoInputMaskByClipPath)","Funname":"setAutoInputMaskByClipPath","Returntype":"void","Args":"bool autoInputMaskByClipPath"},{"Uniquefunname":"void setBorderColor(const QColor \u0026 borderColor)","Funname":"setBorderColor","Returntype":"void","Args":"const QColor \u0026 borderColor"},{"Uniquefunname":"void setBorderWidth(int borderWidth)","Funname":"setBorderWidth","Returntype":"void","Args":"int borderWidth"},{"Uniquefunname":"void setClipPath(const QPainterPath \u0026 clipPath)","Funname":"setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 clipPath"},{"Uniquefunname":"void setDisableWindowOverrideCursor(QWindow * window,bool disable)","Funname":"setDisableWindowOverrideCursor","Returntype":"void","Args":"QWindow * window,bool disable"},{"Uniquefunname":"void setEnableBlurWindow(bool enableBlurWindow)","Funname":"setEnableBlurWindow","Returntype":"void","Args":"bool enableBlurWindow"},{"Uniquefunname":"void setEnableSystemMove(bool enableSystemMove)","Funname":"setEnableSystemMove","Returntype":"void","Args":"bool enableSystemMove"},{"Uniquefunname":"void setEnableSystemResize(bool enableSystemResize)","Funname":"setEnableSystemResize","Returntype":"void","Args":"bool enableSystemResize"},{"Uniquefunname":"bool setEnabledNoTitlebarForWindow(QWindow * window,bool enable)","Funname":"setEnabledNoTitlebarForWindow","Returntype":"bool","Args":"QWindow * window,bool enable"},{"Uniquefunname":"void setFrameMask(const QRegion \u0026 frameMask)","Funname":"setFrameMask","Returntype":"void","Args":"const QRegion \u0026 frameMask"},{"Uniquefunname":"void setShadowColor(const QColor \u0026 shadowColor)","Funname":"setShadowColor","Returntype":"void","Args":"const QColor \u0026 shadowColor"},{"Uniquefunname":"void setShadowOffset(const QPoint \u0026 shadowOffset)","Funname":"setShadowOffset","Returntype":"void","Args":"const QPoint \u0026 shadowOffset"},{"Uniquefunname":"void setShadowRadius(int shadowRadius)","Funname":"setShadowRadius","Returntype":"void","Args":"int shadowRadius"},{"Uniquefunname":"void setTranslucentBackground(bool translucentBackground)","Funname":"setTranslucentBackground","Returntype":"void","Args":"bool translucentBackground"},{"Uniquefunname":"bool setWindowBlurAreaByWM(const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool setWindowBlurAreaByWM(const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"const QVector\u003cWMBlurArea\u003e \u0026 area"},{"Uniquefunname":"bool setWindowBlurAreaByWM(QWindow * window,const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"QWindow * window,const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool setWindowBlurAreaByWM(QWindow * window,const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"QWindow * window,const QVector\u003cWMBlurArea\u003e \u0026 area"},{"Uniquefunname":"public Q_SLOTS setWindowRadius(int windowRadius)","Funname":"setWindowRadius","Returntype":"public Q_SLOTS","Args":"int windowRadius"},{"Uniquefunname":"QColor shadowColor()","Funname":"shadowColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void shadowColorChanged()","Funname":"shadowColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPoint shadowOffset()","Funname":"shadowOffset","Returntype":"QPoint","Args":""},{"Uniquefunname":"void shadowOffsetChanged()","Funname":"shadowOffsetChanged","Returntype":"void","Args":""},{"Uniquefunname":"int shadowRadius()","Funname":"shadowRadius","Returntype":"int","Args":""},{"Uniquefunname":"void shadowRadiusChanged()","Funname":"shadowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool translucentBackground()","Funname":"translucentBackground","Returntype":"bool","Args":""},{"Uniquefunname":"void translucentBackgroundChanged()","Funname":"translucentBackgroundChanged","Returntype":"void","Args":""},{"Uniquefunname":"WId windowLeader()","Funname":"windowLeader","Returntype":"WId","Args":""},{"Uniquefunname":"int windowRadius()","Funname":"windowRadius","Returntype":"int","Args":""},{"Uniquefunname":"void windowRadiusChanged()","Funname":"windowRadiusChanged","Returntype":"void","Args":""}],"Records":[{"Name":"struct:WMBlurArea","Fields":["qint32","qint32","qint32","qint32","qint32","qint32"]}]}
{"Filepath":"src/dplatformtheme.h","Functions":[{"Uniquefunname":" DPlatformTheme(quint32 window,DPlatformTheme * parent)","Funname":"DPlatformTheme","Returntype":"","Args":"quint32 window,DPlatformTheme * parent"},{"Uniquefunname":"    D_DECLARE_PRIVATE(DPlatformTheme)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DPlatformTheme"},{"Uniquefunname":"QColor activeColor()","Funname":"activeColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void activeColorChanged(QColor activeColor)","Funname":"activeColorChanged","Returntype":"void","Args":"QColor activeColor"},{"Uniquefunname":"QColor alternateBase()","Funname":"alternateBase","Returntype":"QColor","Args":""},{"Uniquefunname":"void alternateBaseChanged(QColor alternateBase)","Funname":"alternateBaseChanged","Returntype":"void","Args":"QColor alternateBase"},{"Uniquefunname":"QColor base()","Funname":"base","Returntype":"QColor","Args":""},{"Uniquefunname":"void baseChanged(QColor base)","Funname":"baseChanged","Returntype":"void","Args":"QColor base"},{"Uniquefunname":"QColor brightText()","Funname":"brightText","Returntype":"QColor","Args":""},{"Uniquefunname":"void brightTextChanged(QColor brightText)","Funname":"brightTextChanged","Returntype":"void","Args":"QColor brightText"},{"Uniquefunname":"QColor button()","Funname":"button","Returntype":"QColor","Args":""},{"Uniquefunname":"void buttonChanged(QColor button)","Funname":"buttonChanged","Returntype":"void","Args":"QColor button"},{"Uniquefunname":"QColor buttonText()","Funname":"buttonText","Returntype":"QColor","Args":""},{"Uniquefunname":"void buttonTextChanged(QColor buttonText)","Funname":"buttonTextChanged","Returntype":"void","Args":"QColor buttonText"},{"Uniquefunname":"bool cursorBlink()","Funname":"cursorBlink","Returntype":"bool","Args":""},{"Uniquefunname":"void cursorBlinkChanged(bool cursorBlink)","Funname":"cursorBlinkChanged","Returntype":"void","Args":"bool cursorBlink"},{"Uniquefunname":"int cursorBlinkTime()","Funname":"cursorBlinkTime","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS cursorBlinkTimeChanged(int cursorBlinkTime)","Funname":"cursorBlinkTimeChanged","Returntype":"Q_SIGNALS","Args":"int cursorBlinkTime"},{"Uniquefunname":"int cursorBlinkTimeout()","Funname":"cursorBlinkTimeout","Returntype":"int","Args":""},{"Uniquefunname":"void cursorBlinkTimeoutChanged(int cursorBlinkTimeout)","Funname":"cursorBlinkTimeoutChanged","Returntype":"void","Args":"int cursorBlinkTimeout"},{"Uniquefunname":"QColor dark()","Funname":"dark","Returntype":"QColor","Args":""},{"Uniquefunname":"void darkChanged(QColor dark)","Funname":"darkChanged","Returntype":"void","Args":"QColor dark"},{"Uniquefunname":"QColor darkLively()","Funname":"darkLively","Returntype":"QColor","Args":""},{"Uniquefunname":"void darkLivelyChanged(QColor darkLively)","Funname":"darkLivelyChanged","Returntype":"void","Args":"QColor darkLively"},{"Uniquefunname":"int dndDragThreshold()","Funname":"dndDragThreshold","Returntype":"int","Args":""},{"Uniquefunname":"void dndDragThresholdChanged(int dndDragThreshold)","Funname":"dndDragThresholdChanged","Returntype":"void","Args":"int dndDragThreshold"},{"Uniquefunname":"void dotsPerInchChanged(const QString \u0026 screen,int dpi)","Funname":"dotsPerInchChanged","Returntype":"void","Args":"const QString \u0026 screen,int dpi"},{"Uniquefunname":"int doubleClickDistance()","Funname":"doubleClickDistance","Returntype":"int","Args":""},{"Uniquefunname":"void doubleClickDistanceChanged(int doubleClickDistance)","Funname":"doubleClickDistanceChanged","Returntype":"void","Args":"int doubleClickDistance"},{"Uniquefunname":"int doubleClickTime()","Funname":"doubleClickTime","Returntype":"int","Args":""},{"Uniquefunname":"void doubleClickTimeChanged(int doubleClickTime)","Funname":"doubleClickTimeChanged","Returntype":"void","Args":"int doubleClickTime"},{"Uniquefunname":"QByteArray fontName()","Funname":"fontName","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void fontNameChanged(QByteArray fontName)","Funname":"fontNameChanged","Returntype":"void","Args":"QByteArray fontName"},{"Uniquefunname":"qreal fontPointSize()","Funname":"fontPointSize","Returntype":"qreal","Args":""},{"Uniquefunname":"void fontPointSizeChanged(qreal fontPointSize)","Funname":"fontPointSizeChanged","Returntype":"void","Args":"qreal fontPointSize"},{"Uniquefunname":"QColor frameBorder()","Funname":"frameBorder","Returntype":"QColor","Args":""},{"Uniquefunname":"void frameBorderChanged(QColor frameBorder)","Funname":"frameBorderChanged","Returntype":"void","Args":"QColor frameBorder"},{"Uniquefunname":"QByteArray gtkFontName()","Funname":"gtkFontName","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void gtkFontNameChanged(QByteArray fontName)","Funname":"gtkFontNameChanged","Returntype":"void","Args":"QByteArray fontName"},{"Uniquefunname":"QColor highlight()","Funname":"highlight","Returntype":"QColor","Args":""},{"Uniquefunname":"void highlightChanged(QColor highlight)","Funname":"highlightChanged","Returntype":"void","Args":"QColor highlight"},{"Uniquefunname":"QColor highlightedText()","Funname":"highlightedText","Returntype":"QColor","Args":""},{"Uniquefunname":"void highlightedTextChanged(QColor highlightedText)","Funname":"highlightedTextChanged","Returntype":"void","Args":"QColor highlightedText"},{"Uniquefunname":"QByteArray iconThemeName()","Funname":"iconThemeName","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void iconThemeNameChanged(QByteArray iconThemeName)","Funname":"iconThemeNameChanged","Returntype":"void","Args":"QByteArray iconThemeName"},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool isValidPalette()","Funname":"isValidPalette","Returntype":"bool","Args":""},{"Uniquefunname":"QColor itemBackground()","Funname":"itemBackground","Returntype":"QColor","Args":""},{"Uniquefunname":"void itemBackgroundChanged(QColor itemBackground)","Funname":"itemBackgroundChanged","Returntype":"void","Args":"QColor itemBackground"},{"Uniquefunname":"QColor light()","Funname":"light","Returntype":"QColor","Args":""},{"Uniquefunname":"void lightChanged(QColor light)","Funname":"lightChanged","Returntype":"void","Args":"QColor light"},{"Uniquefunname":"QColor lightLively()","Funname":"lightLively","Returntype":"QColor","Args":""},{"Uniquefunname":"void lightLivelyChanged(QColor lightLively)","Funname":"lightLivelyChanged","Returntype":"void","Args":"QColor lightLively"},{"Uniquefunname":"QColor link()","Funname":"link","Returntype":"QColor","Args":""},{"Uniquefunname":"void linkChanged(QColor link)","Funname":"linkChanged","Returntype":"void","Args":"QColor link"},{"Uniquefunname":"QColor linkVisited()","Funname":"linkVisited","Returntype":"QColor","Args":""},{"Uniquefunname":"void linkVisitedChanged(QColor linkVisited)","Funname":"linkVisitedChanged","Returntype":"void","Args":"QColor linkVisited"},{"Uniquefunname":"QColor mid()","Funname":"mid","Returntype":"QColor","Args":""},{"Uniquefunname":"void midChanged(QColor mid)","Funname":"midChanged","Returntype":"void","Args":"QColor mid"},{"Uniquefunname":"QColor midlight()","Funname":"midlight","Returntype":"QColor","Args":""},{"Uniquefunname":"void midlightChanged(QColor midlight)","Funname":"midlightChanged","Returntype":"void","Args":"QColor midlight"},{"Uniquefunname":"QByteArray monoFontName()","Funname":"monoFontName","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void monoFontNameChanged(QByteArray monoFontName)","Funname":"monoFontNameChanged","Returntype":"void","Args":"QByteArray monoFontName"},{"Uniquefunname":"DPalette palette()","Funname":"palette","Returntype":"DPalette","Args":""},{"Uniquefunname":"void paletteChanged(DPalette palette)","Funname":"paletteChanged","Returntype":"void","Args":"DPalette palette"},{"Uniquefunname":"DPlatformTheme * parentTheme()","Funname":"parentTheme","Returntype":"DPlatformTheme *","Args":""},{"Uniquefunname":"void setActiveColor(const QColor activeColor)","Funname":"setActiveColor","Returntype":"void","Args":"const QColor activeColor"},{"Uniquefunname":"void setAlternateBase(const QColor \u0026 alternateBase)","Funname":"setAlternateBase","Returntype":"void","Args":"const QColor \u0026 alternateBase"},{"Uniquefunname":"void setBase(const QColor \u0026 base)","Funname":"setBase","Returntype":"void","Args":"const QColor \u0026 base"},{"Uniquefunname":"void setBrightText(const QColor \u0026 brightText)","Funname":"setBrightText","Returntype":"void","Args":"const QColor \u0026 brightText"},{"Uniquefunname":"void setButton(const QColor \u0026 button)","Funname":"setButton","Returntype":"void","Args":"const QColor \u0026 button"},{"Uniquefunname":"void setButtonText(const QColor \u0026 buttonText)","Funname":"setButtonText","Returntype":"void","Args":"const QColor \u0026 buttonText"},{"Uniquefunname":"void setCursorBlink(bool cursorBlink)","Funname":"setCursorBlink","Returntype":"void","Args":"bool cursorBlink"},{"Uniquefunname":"public Q_SLOTS setCursorBlinkTime(int cursorBlinkTime)","Funname":"setCursorBlinkTime","Returntype":"public Q_SLOTS","Args":"int cursorBlinkTime"},{"Uniquefunname":"void setCursorBlinkTimeout(int cursorBlinkTimeout)","Funname":"setCursorBlinkTimeout","Returntype":"void","Args":"int cursorBlinkTimeout"},{"Uniquefunname":"void setDark(const QColor \u0026 dark)","Funname":"setDark","Returntype":"void","Args":"const QColor \u0026 dark"},{"Uniquefunname":"void setDarkLively(const QColor \u0026 darkLively)","Funname":"setDarkLively","Returntype":"void","Args":"const QColor \u0026 darkLively"},{"Uniquefunname":"void setDndDragThreshold(int dndDragThreshold)","Funname":"setDndDragThreshold","Returntype":"void","Args":"int dndDragThreshold"},{"Uniquefunname":"void setDotsPerInch(const QString \u0026 screenName,int dpi)","Funname":"setDotsPerInch","Returntype":"void","Args":"const QString \u0026 screenName,int dpi"},{"Uniquefunname":"void setDoubleClickDistance(int doubleClickDistance)","Funname":"setDoubleClickDistance","Returntype":"void","Args":"int doubleClickDistance"},{"Uniquefunname":"void setDoubleClickTime(int doubleClickTime)","Funname":"setDoubleClickTime","Returntype":"void","Args":"int doubleClickTime"},{"Uniquefunname":"void setFallbackProperty(bool fallback)","Funname":"setFallbackProperty","Returntype":"void","Args":"bool fallback"},{"Uniquefunname":"void setFontName(const QByteArray \u0026 fontName)","Funname":"setFontName","Returntype":"void","Args":"const QByteArray \u0026 fontName"},{"Uniquefunname":"void setFontPointSize(qreal fontPointSize)","Funname":"setFontPointSize","Returntype":"void","Args":"qreal fontPointSize"},{"Uniquefunname":"void setFrameBorder(const QColor \u0026 frameBorder)","Funname":"setFrameBorder","Returntype":"void","Args":"const QColor \u0026 frameBorder"},{"Uniquefunname":"void setGtkFontName(const QByteArray \u0026 fontName)","Funname":"setGtkFontName","Returntype":"void","Args":"const QByteArray \u0026 fontName"},{"Uniquefunname":"void setHighlight(const QColor \u0026 highlight)","Funname":"setHighlight","Returntype":"void","Args":"const QColor \u0026 highlight"},{"Uniquefunname":"void setHighlightedText(const QColor \u0026 highlightedText)","Funname":"setHighlightedText","Returntype":"void","Args":"const QColor \u0026 highlightedText"},{"Uniquefunname":"void setIconThemeName(const QByteArray \u0026 iconThemeName)","Funname":"setIconThemeName","Returntype":"void","Args":"const QByteArray \u0026 iconThemeName"},{"Uniquefunname":"void setItemBackground(const QColor \u0026 itemBackground)","Funname":"setItemBackground","Returntype":"void","Args":"const QColor \u0026 itemBackground"},{"Uniquefunname":"void setLight(const QColor \u0026 light)","Funname":"setLight","Returntype":"void","Args":"const QColor \u0026 light"},{"Uniquefunname":"void setLightLively(const QColor \u0026 lightLively)","Funname":"setLightLively","Returntype":"void","Args":"const QColor \u0026 lightLively"},{"Uniquefunname":"void setLink(const QColor \u0026 link)","Funname":"setLink","Returntype":"void","Args":"const QColor \u0026 link"},{"Uniquefunname":"void setLinkVisited(const QColor \u0026 linkVisited)","Funname":"setLinkVisited","Returntype":"void","Args":"const QColor \u0026 linkVisited"},{"Uniquefunname":"void setMid(const QColor \u0026 mid)","Funname":"setMid","Returntype":"void","Args":"const QColor \u0026 mid"},{"Uniquefunname":"void setMidlight(const QColor \u0026 midlight)","Funname":"setMidlight","Returntype":"void","Args":"const QColor \u0026 midlight"},{"Uniquefunname":"void setMonoFontName(const QByteArray \u0026 monoFontName)","Funname":"setMonoFontName","Returntype":"void","Args":"const QByteArray \u0026 monoFontName"},{"Uniquefunname":"void setPalette(const DPalette \u0026 palette)","Funname":"setPalette","Returntype":"void","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"void setShadow(const QColor \u0026 shadow)","Funname":"setShadow","Returntype":"void","Args":"const QColor \u0026 shadow"},{"Uniquefunname":"void setSoundThemeName(const QByteArray \u0026 soundThemeName)","Funname":"setSoundThemeName","Returntype":"void","Args":"const QByteArray \u0026 soundThemeName"},{"Uniquefunname":"void setText(const QColor \u0026 text)","Funname":"setText","Returntype":"void","Args":"const QColor \u0026 text"},{"Uniquefunname":"void setTextLively(const QColor \u0026 textLively)","Funname":"setTextLively","Returntype":"void","Args":"const QColor \u0026 textLively"},{"Uniquefunname":"void setTextTips(const QColor \u0026 textTips)","Funname":"setTextTips","Returntype":"void","Args":"const QColor \u0026 textTips"},{"Uniquefunname":"void setTextTitle(const QColor \u0026 textTitle)","Funname":"setTextTitle","Returntype":"void","Args":"const QColor \u0026 textTitle"},{"Uniquefunname":"void setTextWarning(const QColor \u0026 textWarning)","Funname":"setTextWarning","Returntype":"void","Args":"const QColor \u0026 textWarning"},{"Uniquefunname":"void setThemeName(const QByteArray \u0026 themeName)","Funname":"setThemeName","Returntype":"void","Args":"const QByteArray \u0026 themeName"},{"Uniquefunname":"void setToolTipBase(const QColor \u0026 toolTipBase)","Funname":"setToolTipBase","Returntype":"void","Args":"const QColor \u0026 toolTipBase"},{"Uniquefunname":"void setToolTipText(const QColor \u0026 toolTipText)","Funname":"setToolTipText","Returntype":"void","Args":"const QColor \u0026 toolTipText"},{"Uniquefunname":"void setWindow(const QColor \u0026 window)","Funname":"setWindow","Returntype":"void","Args":"const QColor \u0026 window"},{"Uniquefunname":"void setWindowRadius(int windowRadius)","Funname":"setWindowRadius","Returntype":"void","Args":"int windowRadius"},{"Uniquefunname":"void setWindowText(const QColor \u0026 windowText)","Funname":"setWindowText","Returntype":"void","Args":"const QColor \u0026 windowText"},{"Uniquefunname":"QColor shadow()","Funname":"shadow","Returntype":"QColor","Args":""},{"Uniquefunname":"void shadowChanged(QColor shadow)","Funname":"shadowChanged","Returntype":"void","Args":"QColor shadow"},{"Uniquefunname":"QByteArray soundThemeName()","Funname":"soundThemeName","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void soundThemeNameChanged(QByteArray soundThemeName)","Funname":"soundThemeNameChanged","Returntype":"void","Args":"QByteArray soundThemeName"},{"Uniquefunname":"QColor text()","Funname":"text","Returntype":"QColor","Args":""},{"Uniquefunname":"void textChanged(QColor text)","Funname":"textChanged","Returntype":"void","Args":"QColor text"},{"Uniquefunname":"QColor textLively()","Funname":"textLively","Returntype":"QColor","Args":""},{"Uniquefunname":"void textLivelyChanged(QColor textLively)","Funname":"textLivelyChanged","Returntype":"void","Args":"QColor textLively"},{"Uniquefunname":"QColor textTips()","Funname":"textTips","Returntype":"QColor","Args":""},{"Uniquefunname":"void textTipsChanged(QColor textTips)","Funname":"textTipsChanged","Returntype":"void","Args":"QColor textTips"},{"Uniquefunname":"QColor textTitle()","Funname":"textTitle","Returntype":"QColor","Args":""},{"Uniquefunname":"void textTitleChanged(QColor textTitle)","Funname":"textTitleChanged","Returntype":"void","Args":"QColor textTitle"},{"Uniquefunname":"QColor textWarning()","Funname":"textWarning","Returntype":"QColor","Args":""},{"Uniquefunname":"void textWarningChanged(QColor textWarning)","Funname":"textWarningChanged","Returntype":"void","Args":"QColor textWarning"},{"Uniquefunname":"QByteArray themeName()","Funname":"themeName","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void themeNameChanged(QByteArray themeName)","Funname":"themeNameChanged","Returntype":"void","Args":"QByteArray themeName"},{"Uniquefunname":"QColor toolTipBase()","Funname":"toolTipBase","Returntype":"QColor","Args":""},{"Uniquefunname":"void toolTipBaseChanged(QColor toolTipBase)","Funname":"toolTipBaseChanged","Returntype":"void","Args":"QColor toolTipBase"},{"Uniquefunname":"QColor toolTipText()","Funname":"toolTipText","Returntype":"QColor","Args":""},{"Uniquefunname":"void toolTipTextChanged(QColor toolTipText)","Funname":"toolTipTextChanged","Returntype":"void","Args":"QColor toolTipText"},{"Uniquefunname":"QColor window()","Funname":"window","Returntype":"QColor","Args":""},{"Uniquefunname":"void windowChanged(QColor window)","Funname":"windowChanged","Returntype":"void","Args":"QColor window"},{"Uniquefunname":"int windowRadius()","Funname":"windowRadius","Returntype":"int","Args":""},{"Uniquefunname":"int windowRadius(int defaultValue)","Funname":"windowRadius","Returntype":"int","Args":"int defaultValue"},{"Uniquefunname":"void windowRadiusChanged(int r)","Funname":"windowRadiusChanged","Returntype":"void","Args":"int r"},{"Uniquefunname":"QColor windowText()","Funname":"windowText","Returntype":"QColor","Args":""},{"Uniquefunname":"void windowTextChanged(QColor windowText)","Funname":"windowTextChanged","Returntype":"void","Args":"QColor windowText"},{"Uniquefunname":" ~DPlatformTheme()","Funname":"~DPlatformTheme","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dregionmonitor.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DRegionMonitor)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DRegionMonitor"},{"Uniquefunname":"    Q_ENUM(CoordinateType)","Funname":"Q_ENUM","Returntype":"","Args":"CoordinateType"},{"Uniquefunname":"Q_SIGNALS buttonPress(const QPoint \u0026 p,const int flag)","Funname":"buttonPress","Returntype":"Q_SIGNALS","Args":"const QPoint \u0026 p,const int flag"},{"Uniquefunname":"void buttonRelease(const QPoint \u0026 p,const int flag)","Funname":"buttonRelease","Returntype":"void","Args":"const QPoint \u0026 p,const int flag"},{"Uniquefunname":"CoordinateType coordinateType()","Funname":"coordinateType","Returntype":"CoordinateType","Args":""},{"Uniquefunname":"void coordinateTypeChanged(CoordinateType type)","Funname":"coordinateTypeChanged","Returntype":"void","Args":"CoordinateType type"},{"Uniquefunname":"void cursorMove(const QPoint \u0026 p)","Funname":"cursorMove","Returntype":"void","Args":"const QPoint \u0026 p"},{"Uniquefunname":"void keyPress(const QString \u0026 keyname)","Funname":"keyPress","Returntype":"void","Args":"const QString \u0026 keyname"},{"Uniquefunname":"void keyRelease(const QString \u0026 keyname)","Funname":"keyRelease","Returntype":"void","Args":"const QString \u0026 keyname"},{"Uniquefunname":"void registerRegion(const QRegion \u0026 region)","Funname":"registerRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"public Q_SLOTS registerRegion()","Funname":"registerRegion","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void setCoordinateType(CoordinateType type)","Funname":"setCoordinateType","Returntype":"void","Args":"CoordinateType type"},{"Uniquefunname":"void setWatchedRegion(const QRegion \u0026 region)","Funname":"setWatchedRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void unregisterRegion()","Funname":"unregisterRegion","Returntype":"void","Args":""},{"Uniquefunname":"QRegion watchedRegion()","Funname":"watchedRegion","Returntype":"QRegion","Args":""}],"Records":[{"Name":"enum:WatchedFlags","Fields":["Button_Left","Button_Right"]},{"Name":"enum:CoordinateType","Fields":["Original","ScaleRatio"]}]}
{"Filepath":"src/dsvgrenderer.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QRectF viewBox READ viewBoxF WRITE setViewBox)","Funname":"Q_PROPERTY","Returntype":"","Args":"QRectF viewBox READ viewBoxF WRITE setViewBox"},{"Uniquefunname":"QRectF boundsOnElement(const QString \u0026 id)","Funname":"boundsOnElement","Returntype":"QRectF","Args":"const QString \u0026 id"},{"Uniquefunname":"QSize defaultSize()","Funname":"defaultSize","Returntype":"QSize","Args":""},{"Uniquefunname":"bool elementExists(const QString \u0026 id)","Funname":"elementExists","Returntype":"bool","Args":"const QString \u0026 id"},{"Uniquefunname":"bool isValid()","Funname":"isValid","Returntype":"bool","Args":""},{"Uniquefunname":"bool load(const QByteArray \u0026 contents)","Funname":"load","Returntype":"bool","Args":"const QByteArray \u0026 contents"},{"Uniquefunname":"public Q_SLOTS load(const QString \u0026 filename)","Funname":"load","Returntype":"public Q_SLOTS","Args":"const QString \u0026 filename"},{"Uniquefunname":"void render(QPainter * p)","Funname":"render","Returntype":"void","Args":"QPainter * p"},{"Uniquefunname":"void render(QPainter * p,const QRectF \u0026 bounds)","Funname":"render","Returntype":"void","Args":"QPainter * p,const QRectF \u0026 bounds"},{"Uniquefunname":"void setViewBox(const QRect \u0026 viewbox)","Funname":"setViewBox","Returntype":"void","Args":"const QRect \u0026 viewbox"},{"Uniquefunname":"void setViewBox(const QRectF \u0026 viewbox)","Funname":"setViewBox","Returntype":"void","Args":"const QRectF \u0026 viewbox"},{"Uniquefunname":"QRect viewBox()","Funname":"viewBox","Returntype":"QRect","Args":""},{"Uniquefunname":"QRectF viewBoxF()","Funname":"viewBoxF","Returntype":"QRectF","Args":""},{"Uniquefunname":" ~DSvgRenderer()","Funname":"~DSvgRenderer","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dtaskbarcontrol.h","Functions":[{"Uniquefunname":"int counter()","Funname":"counter","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS counterChanged(int counter)","Funname":"counterChanged","Returntype":"Q_SIGNALS","Args":"int counter"},{"Uniquefunname":"bool counterVisible()","Funname":"counterVisible","Returntype":"bool","Args":""},{"Uniquefunname":"void counterVisibleChanged(bool visible)","Funname":"counterVisibleChanged","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void progressChanged(double progress)","Funname":"progressChanged","Returntype":"void","Args":"double progress"},{"Uniquefunname":"void progressVisibleChanged(bool visible)","Funname":"progressVisibleChanged","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"protected sendMessage(const QVariantMap \u0026 params)","Funname":"sendMessage","Returntype":"protected","Args":"const QVariantMap \u0026 params"},{"Uniquefunname":"void setCounter(bool counterVisible,int counter)","Funname":"setCounter","Returntype":"void","Args":"bool counterVisible,int counter"},{"Uniquefunname":"void setCounterVisible(bool counterVisible)","Funname":"setCounterVisible","Returntype":"void","Args":"bool counterVisible"},{"Uniquefunname":"void setProgress(bool progressVisible,double progress)","Funname":"setProgress","Returntype":"void","Args":"bool progressVisible,double progress"},{"Uniquefunname":"void setUrgency(bool val)","Funname":"setUrgency","Returntype":"void","Args":"bool val"},{"Uniquefunname":" ~DTaskbarControl()","Funname":"~DTaskbarControl","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dthumbnailprovider.h","Functions":[{"Uniquefunname":"QString createThumbnail(const QFileInfo \u0026 info,Size size)","Funname":"createThumbnail","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void createThumbnailFailed(const QString \u0026 sourceFilePath)","Funname":"createThumbnailFailed","Returntype":"void","Args":"const QString \u0026 sourceFilePath"},{"Uniquefunname":"void createThumbnailFinished(const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath)","Funname":"createThumbnailFinished","Returntype":"void","Args":"const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath"},{"Uniquefunname":"qint64 defaultSizeLimit()","Funname":"defaultSizeLimit","Returntype":"qint64","Args":""},{"Uniquefunname":"QString errorString()","Funname":"errorString","Returntype":"QString","Args":""},{"Uniquefunname":"bool hasThumbnail(const QFileInfo \u0026 info)","Funname":"hasThumbnail","Returntype":"bool","Args":"const QFileInfo \u0026 info"},{"Uniquefunname":"bool hasThumbnail(const QMimeType \u0026 mimeType)","Funname":"hasThumbnail","Returntype":"bool","Args":"const QMimeType \u0026 mimeType"},{"Uniquefunname":"DThumbnailProvider * instance()","Funname":"instance","Returntype":"DThumbnailProvider *","Args":""},{"Uniquefunname":"void removeInProduceQueue(const QFileInfo \u0026 info,Size size)","Funname":"removeInProduceQueue","Returntype":"void","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"void setDefaultSizeLimit(qint64 size)","Funname":"setDefaultSizeLimit","Returntype":"void","Args":"qint64 size"},{"Uniquefunname":"void setSizeLimit(const QMimeType \u0026 mimeType,qint64 size)","Funname":"setSizeLimit","Returntype":"void","Args":"const QMimeType \u0026 mimeType,qint64 size"},{"Uniquefunname":"qint64 sizeLimit(const QMimeType \u0026 mimeType)","Funname":"sizeLimit","Returntype":"qint64","Args":"const QMimeType \u0026 mimeType"},{"Uniquefunname":"Q_SIGNALS thumbnailChanged(const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath)","Funname":"thumbnailChanged","Returntype":"Q_SIGNALS","Args":"const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath"},{"Uniquefunname":"QString thumbnailFilePath(const QFileInfo \u0026 info,Size size)","Funname":"thumbnailFilePath","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":" ~DThumbnailProvider()","Funname":"~DThumbnailProvider","Returntype":"","Args":""}],"Records":[{"Name":"enum:Size","Fields":["Large","Normal","Small"]}]}
{"Filepath":"src/dwindowgroupleader.h","Functions":[{"Uniquefunname":"void addWindow(QWindow * window)","Funname":"addWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"quint32 clientLeaderId()","Funname":"clientLeaderId","Returntype":"quint32","Args":""},{"Uniquefunname":"quint32 groupLeaderId()","Funname":"groupLeaderId","Returntype":"quint32","Args":""},{"Uniquefunname":"void removeWindow(QWindow * window)","Funname":"removeWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":" ~DWindowGroupLeader()","Funname":"~DWindowGroupLeader","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/dwindowmanagerhelper.h","Functions":[{"Uniquefunname":"QVector\u003cquint32\u003e allWindowIdList()","Funname":"allWindowIdList","Returntype":"QVector\u003cquint32\u003e","Args":""},{"Uniquefunname":"QVector\u003cquint32\u003e currentWorkspaceWindowIdList()","Funname":"currentWorkspaceWindowIdList","Returntype":"QVector\u003cquint32\u003e","Args":""},{"Uniquefunname":"QList\u003cDForeignWindow * \u003e currentWorkspaceWindows()","Funname":"currentWorkspaceWindows","Returntype":"QList\u003cDForeignWindow * \u003e","Args":""},{"Uniquefunname":"MotifDecorations getMotifDecorations(const QWindow * window)","Funname":"getMotifDecorations","Returntype":"MotifDecorations","Args":"const QWindow * window"},{"Uniquefunname":"MotifFunctions getMotifFunctions(const QWindow * window)","Funname":"getMotifFunctions","Returntype":"MotifFunctions","Args":"const QWindow * window"},{"Uniquefunname":"bool hasBlurWindow()","Funname":"hasBlurWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void hasBlurWindowChanged()","Funname":"hasBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool hasComposite()","Funname":"hasComposite","Returntype":"bool","Args":""},{"Uniquefunname":"void hasCompositeChanged()","Funname":"hasCompositeChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool hasNoTitlebar()","Funname":"hasNoTitlebar","Returntype":"bool","Args":""},{"Uniquefunname":"void hasNoTitlebarChanged()","Funname":"hasNoTitlebarChanged","Returntype":"void","Args":""},{"Uniquefunname":"DWindowManagerHelper * instance()","Funname":"instance","Returntype":"DWindowManagerHelper *","Args":""},{"Uniquefunname":"void popupSystemWindowMenu(const QWindow * window)","Funname":"popupSystemWindowMenu","Returntype":"void","Args":"const QWindow * window"},{"Uniquefunname":"MotifDecorations setMotifDecorations(const QWindow * window,MotifDecorations hints,bool on)","Funname":"setMotifDecorations","Returntype":"MotifDecorations","Args":"const QWindow * window,MotifDecorations hints,bool on"},{"Uniquefunname":"void setMotifDecorations(const QWindow * window,MotifDecorations hints)","Funname":"setMotifDecorations","Returntype":"void","Args":"const QWindow * window,MotifDecorations hints"},{"Uniquefunname":"MotifFunctions setMotifFunctions(const QWindow * window,MotifFunctions hints,bool on)","Funname":"setMotifFunctions","Returntype":"MotifFunctions","Args":"const QWindow * window,MotifFunctions hints,bool on"},{"Uniquefunname":"void setMotifFunctions(const QWindow * window,MotifFunctions hints)","Funname":"setMotifFunctions","Returntype":"void","Args":"const QWindow * window,MotifFunctions hints"},{"Uniquefunname":"quint32 windowFromPoint(const QPoint \u0026 p)","Funname":"windowFromPoint","Returntype":"quint32","Args":"const QPoint \u0026 p"},{"Uniquefunname":"void windowListChanged()","Funname":"windowListChanged","Returntype":"void","Args":""},{"Uniquefunname":"Q_SIGNALS windowManagerChanged()","Funname":"windowManagerChanged","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"WMName windowManagerName()","Funname":"windowManagerName","Returntype":"WMName","Args":""},{"Uniquefunname":"QString windowManagerNameString()","Funname":"windowManagerNameString","Returntype":"QString","Args":""},{"Uniquefunname":"void windowMotifWMHintsChanged(quint32 winId)","Funname":"windowMotifWMHintsChanged","Returntype":"void","Args":"quint32 winId"},{"Uniquefunname":"WMName ~DWindowManagerHelper()","Funname":"~DWindowManagerHelper","Returntype":"WMName","Args":""}],"Records":[{"Name":"enum:MotifDecoration","Fields":["DECOR_ALL","DECOR_BORDER","DECOR_MAXIMIZE","DECOR_MENU","DECOR_MINIMIZE","DECOR_RESIZEH","DECOR_TITLE"]},{"Name":"enum:WMName","Fields":["DeepinWM","KWinWM","OtherWM"]},{"Name":"enum:MotifFunction","Fields":["FUNC_ALL","FUNC_CLOSE","FUNC_MAXIMIZE","FUNC_MINIMIZE","FUNC_MOVE","FUNC_RESIZE"]}]}
{"Filepath":"src/dbus/arealist.h","Functions":[{"Uniquefunname":"void registerAreaListMetaType()","Funname":"registerAreaListMetaType","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"src/private/dfiledragserver_p.h","Functions":[{"Uniquefunname":" DFileDragServerPrivate(DFileDragServer * q)","Funname":"DFileDragServerPrivate","Returntype":"","Args":"DFileDragServer * q"},{"Uniquefunname":"void writeMimeData(QMimeData * dest)","Funname":"writeMimeData","Returntype":"void","Args":"QMimeData * dest"},{"Uniquefunname":" ~DFileDragServerPrivate()","Funname":"~DFileDragServerPrivate","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/private/dguiapplicationhelper_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DGuiApplicationHelper)","Funname":"D_DECLARE_PUBLIC","Returntype":"public","Args":"DGuiApplicationHelper"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void initApplication(QGuiApplication * app)","Funname":"initApplication","Returntype":"void","Args":"QGuiApplication * app"},{"Uniquefunname":"DPlatformTheme * initWindow(QWindow * window)","Funname":"initWindow","Returntype":"DPlatformTheme *","Args":"QWindow * window"},{"Uniquefunname":"void staticInitApplication()","Funname":"staticInitApplication","Returntype":"void","Args":""}],"Records":null}
{"Filepath":"src/private/dnativesettings_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DNativeSettings)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DNativeSettings"},{"Uniquefunname":"bool init(const QMetaObject * mo,quint32 window)","Funname":"init","Returntype":"bool","Args":"const QMetaObject * mo,quint32 window"},{"Uniquefunname":" ~DNativeSettingsPrivate()","Funname":"~DNativeSettingsPrivate","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/private/dplatformtheme_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DPlatformTheme)","Funname":"D_DECLARE_PUBLIC","Returntype":"public","Args":"DPlatformTheme"},{"Uniquefunname":"void _q_onThemePropertyChanged(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"_q_onThemePropertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void notifyPaletteChanged()","Funname":"notifyPaletteChanged","Returntype":"void","Args":""},{"Uniquefunname":"void onDtkColorChanged(DPalette::ColorType type,const QColor \u0026 color)","Funname":"onDtkColorChanged","Returntype":"void","Args":"DPalette::ColorType type,const QColor \u0026 color"},{"Uniquefunname":"void onQtColorChanged(QPalette::ColorRole role,const QColor \u0026 color)","Funname":"onQtColorChanged","Returntype":"void","Args":"QPalette::ColorRole role,const QColor \u0026 color"}],"Records":null}
{"Filepath":"src/private/dregionmonitor_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DRegionMonitor)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DRegionMonitor"},{"Uniquefunname":"void _q_ButtonPress(const int flag,const int x,const int y,const QString \u0026 key)","Funname":"_q_ButtonPress","Returntype":"void","Args":"const int flag,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_ButtonRelease(const int flag,const int x,const int y,const QString \u0026 key)","Funname":"_q_ButtonRelease","Returntype":"void","Args":"const int flag,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_CursorMove(const int x,const int y,const QString \u0026 key)","Funname":"_q_CursorMove","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_KeyPress(const QString \u0026 keyname,const int x,const int y,const QString \u0026 key)","Funname":"_q_KeyPress","Returntype":"void","Args":"const QString \u0026 keyname,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_KeyRelease(const QString \u0026 keyname,const int x,const int y,const QString \u0026 key)","Funname":"_q_KeyRelease","Returntype":"void","Args":"const QString \u0026 keyname,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"const QPoint deviceScaledCoordinate(const QPoint \u0026 p,const double ratio)","Funname":"deviceScaledCoordinate","Returntype":"const QPoint","Args":"const QPoint \u0026 p,const double ratio"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void registerMonitorRegion()","Funname":"registerMonitorRegion","Returntype":"void","Args":""},{"Uniquefunname":"bool registered()","Funname":"registered","Returntype":"bool","Args":""},{"Uniquefunname":"void unregisterMonitorRegion()","Funname":"unregisterMonitorRegion","Returntype":"void","Args":""},{"Uniquefunname":" ~DRegionMonitorPrivate()","Funname":"~DRegionMonitorPrivate","Returntype":"","Args":""}],"Records":[{"Name":"enum:Flag","Fields":["Button","Key","Motion"]}]}
{"Filepath":"src/private/dtaskbarcontrol_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DTaskbarControl)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DTaskbarControl"},{"Uniquefunname":" ~DTaskbarControlPrivate()","Funname":"~DTaskbarControlPrivate","Returntype":"","Args":""}],"Records":null}
